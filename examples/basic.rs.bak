use
{
	thespis :: { *                      } ,
	thespis_impl :: { * } ,
	thespis_remote :: { * } ,
	futures_ringbuf         :: { * } ,
	std:: { sync::Arc } ,
	log:: { * } ,
	async_executors:: { * } ,
	remotes::{ Service } ,
	pharos::{ * } ,
};

use serde:: { Serialize, Deserialize };



#[ derive( Actor ) ] pub struct Sum( pub i64 );

#[ derive( Serialize, Deserialize, Debug ) ] pub struct Add( pub i64 );
#[ derive( Serialize, Deserialize, Debug ) ] pub struct Sub( pub i64 );
#[ derive( Serialize, Deserialize, Debug ) ] pub struct Show;

impl Message for Add  { type Return = ();  }
impl Message for Sub  { type Return = ();  }
impl Message for Show { type Return = i64; }



impl Handler< Add > for Sum
{
	#[async_fn] fn handle( &mut self, msg: Add ) -> ()
	{
		trace!( "called sum with: {:?}", msg );

		self.0 += msg.0;

	}
}



impl Handler< Sub > for Sum
{
	#[async_fn] fn handle( &mut self, msg: Sub ) -> ()
	{
		trace!( "called sum with: {:?}", msg );

		self.0 -= msg.0;

	}
}



impl Handler< Show > for Sum
{
	#[async_fn] fn handle( &mut self, _msg: Show ) -> i64
	{
		trace!( "called sum with: Show" );

		self.0

	}
}

service_map!
(
	namespace: remotes        ;
	services : Add, Sub, Show ;
);


type DynError = Box< dyn std::error::Error + Send + Sync + 'static >;

#[ async_std::main ]
//
async fn main() -> Result<(), DynError >
{
	// flexi_logger::Logger::with_str( "trace" ).start().unwrap();

	let (server, client) = Endpoint::pair( 64, 64 );


	// Create mailbox for our handler
	//
	let addr_handler = Addr::builder().spawn( Sum(0), &AsyncStd ).expect( "spawn actor mailbox" );

	// Create a service map
	//
	let sm = remotes::Services::new();

	// Register our handlers
	//
	sm.register_handler::<Add >( addr_handler.clone_box() );
	sm.register_handler::<Show>( addr_handler.clone_box() );

	let addr_sm = Addr::builder().spawn( sm, &AsyncStd )?;


	// Create mailbox for peer
	//
	let (peer_addr, peer_mb) = Addr::builder().build() ;

	// create peer with stream/sink
	//
	let mut peer = Peer::from_async_read( peer_addr.clone(), server, 1024, Arc::new( AsyncStd ), None ).expect( "spawn peer" );

	let peer_evts = peer.observe( ObserveConfig::default() ).expect( "pharos not closed" );

	// register service map with peer
	//
	peer.register_services( addr_sm );

	let handle = exec.spawn_handle( peer_mb.start_fut(peer) ).expect( "start mailbox of Peer" );



	let (to_provider, _)  = peer_connect( client, AsyncStd, "peer_b_to_peera" );

	// Call the service and receive the response
	//
	let mut addr = remotes::RemoteAddr::new( to_provider.clone() );

	let resp = addr.call( Add(5) ).await.expect( "Call Add(5)" );
	assert_eq!( (), resp );

	provider_addr.call( RemoveServices{ services: vec![ Add::sid() ] } ).await.expect( "Add service Sub" );

	let resp = addr.call( Add(5) ).await;
	assert_matches!( resp.unwrap_err(), ThesRemoteErr::Remote{ err: ConnectionError::UnknownService{..}, .. } );

	let resp = addr.call( Show ).await.expect( "Call failed" );
	assert_eq!( 5, resp );

	provider_addr.send( CloseConnection{ remote: false, reason: "Program end.".to_string() } ).await.expect( "close connection to peera" );

	drop( provider_addr );
	provider_handle.await;

	trace!( "end of test" );

	Ok(())
}
